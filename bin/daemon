#!/usr/bin/env perl

use v5.20;
use feature 'postderef' ; no warnings 'experimental::postderef';

# we will add to our @INC the lib and the local (carton) paths
use File::Basename;
use File::Spec;
use lib File::Spec->catdir( File::Spec->catdir( File::Spec->rel2abs( dirname( $0 ) ) , File::Spec->updir() ) , 'lib' ) ;
use lib File::Spec->catdir( File::Spec->catdir( File::Spec->rel2abs( dirname( $0 ) ) , File::Spec->updir() ) , 'local' , 'lib', 'perl5' ) ;
my $dist_dir = File::Spec->catdir( File::Spec->rel2abs( dirname( $0 ) ) , File::Spec->updir() );
my $etc_dir = File::Spec->catdir( File::Spec->rel2abs( dirname( $0 ) ) , File::Spec->updir() , 'etc' );


#load our required modules
use AnyEvent;
use Module::Find;
use Module::Load;
use Data::Printer;
use Log::Log4perl;
use Scalar::Util;
use Errno;
use YAML qw(LoadFile);
use Try::Tiny;
use Data::Dumper;
use autodie qw(chdir open close fork);
use POSIX qw(setsid); # used for daemonize

use Getopt::Long;
#lifted from https://perlancar.wordpress.com/2016/12/01/getopt-modules-01-getoptlong/
Getopt::Long::Configure("bundling", "no_ignore_case", "permute", "no_getopt_compat"); 

GetOptions(
	'd'	=> \(my $daemonize = 0),
);

# from http://perldoc.perl.org/perlipc.html#Complete-Dissociation-of-Child-from-Parent
# maybe there should be a double fork in order to prevent re-acquiring the terminal
sub daemonize {
	chdir("/")			|| die "can't chdir to /: $!";
	open(STDIN,  '<', '/dev/null')	|| die "can't read /dev/null: $!";
	open(STDOUT, '>', '/dev/null')	|| die "can't write to /dev/null: $!";
	defined(my $pid = fork())	|| die "can't fork: $!";
	exit if $pid;			# non-zero now means I am the parent
	(setsid() != -1)		|| die "Can't start a new session: $!";
	open(STDERR, '>&', \*STDOUT)	|| die "can't dup stdout: $!";
}

if( $daemonize ) {
	daemonize;
}

#get a logger
Log::Log4perl::init_and_watch( File::Spec->catdir( $etc_dir , 'daemon.logger' ) );
my $logger = Log::Log4perl->get_logger;

$logger->info('logger active');

#internal tick rate of the daemon
my $interval = 300;
my $conf_file = File::Spec->catdir( $etc_dir , 'objects.yaml' );

my $objects;

sub dispatch {
	my $id = shift // die 'missing id to dispatch message to';
	my $function = shift // die 'empty function name to use as dispatcher';
	my @rest = @_;
	$logger->trace("sending $function message to $id");

	my $object;
	# make sure the object $id does exist
	if( ! defined( $object = $objects->{ $id } ) ) { 
		$logger->error("Cannot dispatch message '$function' to id $id, because does not exist!");
		die
	}
		
	my $re_init_object;
	try {
		$object->$function( @rest );
	}
	catch {
		$logger->error("Method $function in object $id died. The error was: $_");
		$re_init_object = 1 #if there was a problem, try to reinitialize the object
	};
	if( $re_init_object ) {
		$logger->info("I will try to re-initialize object $id");
		# TODO: review this code, we are calling a Moose-specific method
		# which should conceivably re-initialize the object
		# example, for SendmailParser, this BUILD() just calls init_redis()
		try {
			$object->BUILD;
		}
		catch {
			$logger->error("Cannot reinitialize object $id, error was: $_")
		}
	}
}

# quit condition variable
my $quit = AnyEvent->condvar;

# handle TERM and INT signals
my $quiter = sub {
	local $SIG{ TERM } = 'IGNORE';
	local $SIG{ INT  } = 'IGNORE';
	$quit->send
};

my $reloader;

sub arm_reloader {
	$reloader = AnyEvent->condvar;
	$reloader->cb( sub {
		$logger->debug('calling conf_reload');
		conf_reload();
		$logger->debug('rearming');
		arm_reloader()
	});
}

arm_reloader();

$SIG{ INT  }	= $quiter;
$SIG{ TERM }	= $quiter;
$SIG{ HUP }	= sub {
	$logger->info('received HUP signal');
	$reloader->send
};


my $tick = AnyEvent->timer (
	after		=> 0.1,
	interval	=> $interval,
	cb		=> \&conf_reload,
);

sub conf_reload {
	$logger->trace('trying conf reload');
	my $conf = load_config( $conf_file );
	if ( defined($conf) ) {
		parse_config( $conf )
	}
	else {
		$logger->trace('parse_config returned undef')
	}
}

my $repeater;

sub parse_config {
	my $conf = shift // die 'incorrect call';
	my $retry_soon = 0;
	$repeater = undef;
	$objects = {};
	MODULES:
	for my $module ( keys $conf->%* ){
		my $package = 'Daemon::Plugin::'.$module;
		$logger->debug("Loading module $package");
		try {
			load $package;
		}
		catch {
			$logger->warn("Cannot load module $package. Objects of that type will not be able to exist until it is possible to load that module. Error was: ".$_);
			$retry_soon = 1;
			next MODULES;
		};
		for my $id ( keys $conf->{ $module }->%* ) {
			try {
				$logger->info("creating object $id of class $package");
				my $args = $conf->{ $module }->{ $id };
				$args->{ dispatch } = \&dispatch;
				$args->{ id } = $id;
				my $obj = $package->new( $args );
				$objects->{ $id } = $obj;
			}
			catch {
				$logger->error("cannot create object $id, error was: $_");
				$logger->info("arming full conf reload because object $id failed to init");
				$reloader->send
			}
		}
	}
	$repeater = AnyEvent->timer( after => 1, interval => 1, cb => \&conf_reload ) if $retry_soon;
}

sub load_config {
	my $conf_file = shift // die 'incorrect call';
	if( ! -e $conf_file ) {
		$logger->error("file $conf_file does not exist");
		$quit->send;
		return
	}

	state $previous_last_mod;
	my $last_mod = (stat($conf_file))[9];
	if ( $last_mod == $previous_last_mod ) {
		$logger->trace("file $conf_file unchanged");
		return
	}
	$logger->info("(re)loading file $conf_file");

	my $conf = try { LoadFile($conf_file) } catch {
		$logger->error("cannot YAML::LoadFile $conf_file: $_");
		$quit->send;
	};
	$conf // return;

	$logger->trace("Config: ".scalar(Dumper($conf)));
	$previous_last_mod = $last_mod;
	return $conf
}

$quit->recv;
$logger->info('told to quit...');

